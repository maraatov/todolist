{"version":3,"sources":["reportWebVitals.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","App.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","id","todolistId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","onTitleChangeHandler","newValue","changeTaskTitle","className","isDone","Checkbox","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","App","todolists","useSelector","state","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","rootReducer","combineReducers","stateCopy","newTasks","newTask","todolistTasks","newTasksArray","copyState","todolist","find","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d5b671f.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from './components/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskType } from './Todolist'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback } from 'react'\r\nimport { AddItemForm } from './components/AddItemForm'\r\nimport { EditableSpan } from './components/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task'\r\nimport { FilterValuesType } from './App';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { v1 } from 'uuid';\r\nimport { FilterValuesType, TodolistType } from '../App';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import { TaskType } from '../Todolist';\r\nimport { v1 } from 'uuid';\r\nimport { AddTodolistActionType, RemoveTodolistActionType } from './todolists-reducer';\r\nimport { TasksStateType } from '../App';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, { useCallback } from 'react'\r\nimport './App.css';\r\nimport { TaskType, Todolist } from './Todolist';\r\nimport { AddItemForm } from './components/AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { Menu } from '@mui/icons-material';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from './state/todolists-reducer';\r\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport { combineReducers, createStore } from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}